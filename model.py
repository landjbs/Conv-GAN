"""
Implements base model class for deep convolutional adversarial network
"""

# def assert_types(obj, name, expectedType):
#     """ Helper to assert proper typing of function inputs """
#     assert isinstance(obj, expectedType), f'{name} expected type {expectedType}, but found type {type{obj}}'

from keras.layers import Input

class GAN(object):

    def __init__(self, name, rowNum, columnNum, channelNum):
        self.name   =   name
        # data formats
        self.rowNum     =   rowNum
        self.columnNum  =   columnNum
        self.channelNum =   channelNum
        # model structures
        self.discriminatorStructure =   None
        self.generatorStructure     =   None
        # compiled models
        self.discriminatorCompiled  =   None
        self.generatorCompiled      =   None
        ## model building params ##
        # default first-layer filter depth of discriminator
        self.DIS_DEPTH          =   64
        # default dropout; should prevent memorization
        self.DROPOUT            =   0.4
        # default kernel size
        self.KERNEL_SIZE        =   5
        # default convolution stride length
        self.STRIDE             =   2
        # default alpha of LeakyReLU activation in discriminator
        self.LEAKY_ALPHA        =   0.2
        # dimensions of generator latent space
        self.LATENT_DIMS        =   100
        # default momentum for adjusting mean and var in generator batch norm
        self.NORM_MOMENTUM      =   0.9

    def dis_get_filter_num(self, layerNum):
        """
        Determines number of filters to use on convolution layer assuming layer
        count starts at 1.
        """
        return (self.DIS_DEPTH * (2 ** (layerNum - 1)))

    def gen_get_filter_num(self, layerNum):
        """
        Determines number of filters to use on transpose convolution layer
        assuming filters were generated by dis_get_filter_num() and layer count
        starts at 1.
        """
        return (self.GEN_DEPTH / (2 ** layerNum))

    class ModelWarning(Warning):
        """ Class for warnings related to model building and compiling """
        pass

    def build_discriminator(self):
        """ Builds discriminator architecture without compiling model """
        if self.discriminatorStructure:
            raise ModelWarning('Discriminator has already been built.')
            return self.discriminatorStructure
        # set up local vars for building
        INPUT_SHAPE = (self.rowNum, self.columnNum, self.channelNum)
        KERNEL_SIZE =
        # discriminator architecture
        inputs = Input(shape=INPUT_SHAPE, name='inputs')
